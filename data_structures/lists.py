print("Data structures are containers of data that organize and group different kinds of data types together in different ways")
print("These containers give Python much more power to develop complex programs. The data structures in Python are: \n\t{}, \n\t{}, \n\t{}, \n\t{}".format("lists", "tuples", "sets", "dictionaries" ))
print('#' * 79)
print("The list is one of the most common and basic data structure in Python.\n It is a data structure for a mutable ordered sequence of elements")
print("mutable means it can be altered/ changed after being created without neccessarily creating a new object.\n ordered means each element has an index(an integer that defines it's position in the list) and can be referenced/ obtained using that index")
print('#' * 79)
print("Lists are created using square brackets [] and can contain any data type(integer, float, boolean, strings) or even another data structure(container of data e.g another list)")
list_of_random_things = [1, 2.5, 'hello', True, -5, -0.9, '\\', False]
print("This is a list comprising of objects of different data types: {}".format(list_of_random_things))
print('#' * 79)
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
print("Given a list of months like this; months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']: we can index into the list to get an individual month or slice the list to get a subsequence of the list as follows;")
print('#' * 79)
print("Get the first month as follows: months[0]- {}".format(months[0]))
print("Get the last month as follows: months[-1]- {}".format(months[-1]))
print("Get the first three months as follows: months[0:3]- {}".format(months[0:3]))
print('#' * 79)
print("Note that indexing starts from zero(counting from the front the first index is zero and counting from the back, index starts from -1) and the slicing uses a lower bound and an upper bound where the lower bound is inclusive and the upper bound is exclusive")
print('#' * 79)
print("Slicing has shortcuts as follows:\n\t{}, {}, \n\t{}, {}".format("If the lower bound is from the start of the list, you can ommit the 0 index and just give the upper bound e.g to print the first six months; months[:6]", months[:6], "If the upper bound is up to the end of the list, you can ommit the last index and just give the lower bound e.g to print the last six months; months[6:]", months[6:]))
print('#' * 79)
print("If you try accessing an index that does not access, you wil get a list index exception. If you try to slice using bounds that are of indexes that do not exist, you will just get an empty list back and not an error")
print('#' * 79)
print("List is a type just like int, float, str thus calling the type() function on it will give you:", type(months)) 