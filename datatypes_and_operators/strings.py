print("Wondering how to deal with text in Python? The string datatype is used to represent text in Python")
print("str(short for String) is a datatype for immutable ordered sequence of characters(any typeable symbol on the keyboard- that includes space, tab, punctuation e.t.c)")
print('#' * 79)
print("immutable means once a string object has been declared you cannot alter or change it without creating a new object")
print("ordered means that each character in the string has an index and can be referenced using that index")
print('#' * 79)
print("Strings are created by wrapping any character(s) in quotes. Both single(') and double(\") quotes can be used")
print("When you have to represent quotes inside the string declaration, use the backslash(\) character to escape the quotes so that Python does not misinterpret the qoutes as the end of the string declaration like shown below:")
print('#' * 79)
greeting = 'Hello world, how\'re ya\'ll doing?'
print("The assignment greeting = 'Hello world, how\\'re ya\\'ll doing?' when printed out will display:", greeting)
reported_speech = "He said, \"There is nothing I can do\""
print('The assignment reported_speech = "He said, \\"There is nothing I can do\\"" when printed out will display:', reported_speech)
print('#' * 79)
print("The '+' and '*' operators can be used on strings to join(append) and repeat strings respectively")
print("Printing 'Hello there, ' + 'hope you are enjoying Python so far' will display:", 'Hello there, ' + 'hope you are enjoying Python so far')
print('#' * 79)
print("Printing 'Repeat' * 20 will display:", 'Repeat' * 20)
print('#' * 79)
print("As you can see above, Python is completely literal when dealing with strings. You have to explicitly add spacing and punctuations if you want them included in your string like below:")
print('#' * 79)
print("'Repeat ' * 20 will display:",'Repeat ' * 20)
print('#' * 79)
print("A few functions  that operate on strings are:")
print("len() returns the number of characters in a string. It begins counting from 1 and includes every character even spaces, tabs, new line characters and punctuation marks e.g len('Hello world') returns:", len('Hello world'))
print('#' * 79)
print("Methods are special type of functions that belong to specific objects(depending on their datatype) and are called using the dot(.) notation e.g")
print("upper() method returns the string in uppercase e.g 'hello world'.upper() will return:", 'hello world'.upper())
print("title() method returns the string with all first letters capitalized e.g 'hello world'.title() will return:", 'hello world'.title())
print("lower() method returns the string in lower case e.g 'ABCDEFGHIJK'.lower() will return:", 'ABCDEFGHIJK'.lower())
print('#' * 79)
print("The first argument in the method function is the object itself that is calling the method. Some methods have extra arguments like the ones below:")
print("count() returns how many occurences of the particular sequence of characters occur in the object it is called on e.g 'she sells sea shells by the sea shore'.count('sea') will output",'she sells sea shells by the sea shore'.count('sea'))
print('#' * 79)
print("find() returns the first occurence(as an index) of a substring in a string object e.g 'she sells sea shells by the sea shore'.find('s') will return:", 'she sells sea shells by the sea shore'.find('s'))
print("rfind() returns the last occurence(as an index) of a substring in a string object e.g 'she sells sea shells by the sea shore'.rfind('s') will return:", 'she sells sea shells by the sea shore'.rfind('s'))
print('#' * 79)
print("format() method is used to replace any number of '{}' put in a string e.g 'Hey {}, {}'.format('first name', 'last name') will display: ", 'Hey {}, {}'.format('first_name', 'last name'))
print('#' * 79)
print("You can get any character or set of characters from a string by indexing and dicing as shown below:")
print("You can get the first character in a string like this print('hello world[0]') >>>", 'hello world'[0])
print("You can get the last character in a string like this print('hello world[-1]') >>>", 'hello world'[-1])
print('#' * 79)
print("Python and programming in general uses zero-based indexing i.e it counts from zero and not one. This is explicable in the sense that we consider how far a character is from the beginning of the string and the first character is 0 characters away from the start, the second is 1 character away and so on...")
print("Counting from the end, the last character is -1, the second last is -2 and so on...")